C语言
分支语句
if 语句
语法结构
if（表达式）
语句；
if（表达式）
语句1；
else
语句2；
//多分支
if（表达式1）
语句1；
else if (表达式2）
语句2；
else 
语句3
#include <stdio.h>
int main()
{
    int age =10;         //int age =20;
    if(age<18)           //if(age<18)
    printf("未成年\n");  //printf("未成年\n");
    return 0;           // else
}                       // printf("成年\n");


 #include <stdio.h>
 int main()
 {
     int age=18;            
     if(age<18)
     printf("未成年\n");
     else if(age>=18 && age<23)     //if(18<=age<28)//先执行18<=age为假输出0，然后0<28输出为真
     printf("青年\n");              // else          
     else if(age>=23 && age <50)        {                        
     printf("壮年\n");                      if(age>=18&&age<23)
     else if(age>=50 && age <90)            printf("青年\n");
     printf("老年\n");                             ...
     else                                   else
     printf("暮年\n");                       printf("暮年\n");
     return 0;                               }
 } 
 
 如果表达式的结果为真，则语句执行
在C语言中如何表示真假？
0表示假，1表示真
如果条件成立，要执行多条语句，怎应该使用代码块？
int main()
{
if(表达式）
{
语句列表1
}
else
{
语句列表2
}
return0；
}
这里的一对{ }就是一个代码块

悬空else  //else与离它最近的if匹配
#include <stdio.h>
int main()
{
    int a=0;
    int b=2;
    if(a==-1)
    if(b==2)
    printf("haha\n");
    else
    printf("haha\n");
    return 0;
}
输出：没有输出
if 书写形式的对比
//代码1
if (condition) {
return x;
}
return y;
//条件成立返回x，条件不成立返回y
//代码2
if (condition)
{
return x;
}
else
{
return y;
}
//代码3 
int main()
{
    int num =4;
    if (num=5)    // =赋值 ==判断相等 建议书写：if(5==num)
    {
        printf("hehe\n");    
    }
    return 0;
}
输出:hehe (bug)
 
