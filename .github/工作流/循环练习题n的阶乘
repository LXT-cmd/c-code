n的阶乘
#include<stdio.h>
int main()
{
    int i=0;
    int n=0;
    int sum=1;
    scanf("%d",&n);
    for(i=1;i<=n;i++)
    {
        sum=sum*i;            
    }
    printf("%d",sum);
    return 0;
}
计算1!+2!+3!...10!
#include <stdio.h>
int main()
{
    int i=0;
    int n=0;
    int ret=1;
    int sum=0;
    for(n=1;n<=10;i++)
    {
        for(i=1;i<=n;i++)
        {
            ret=ret*i;        
        }    
        sum=sum+ret;
    }
    printf("%d",sum);
    return 0;
}
优化后
#include<stdio.h>
int main()
{
    int i=0;
    int ret=1;
    int sum=0;
    for(i=1;i<=10;i++)
    {
        ret=sum*i;
        sum=ret+sum;    
    }
    printf("%d\n",sum);
    return 0;
}
在一个有序数组中查找具体的某个数字n。编写int binsearch(int x,int y[],int n);功能；在v[0]<=v[1]<=[2]<=[3]....,=[n-1]的数组中查找x
#include<stdio.h>
int main()
{
    int arr[]={1,2,3,4,5,6,7,8,9,10};
    int k=7;
    int i=0;
    int sz=sizeof(arr)/sizeof(arr[0]);
    for(i=0;i<10;i++)
    {
        if(k==arr[i])
        {
            printf("找到了，下标是%d\n",i);                    
        }    
    }
    if(i==sz)
    {
        printf("找不到%d\n");    
    }
    return 0;
}
折半查找法或二分查找法
#include<stdio.h>
int main()
{
    int k=7;
    int arr[]={1,2,3,4,5,6,7,8,9,10};
    int left=0;
    int right=sz-1;
    int sz=sizeof(arr)/sizeof(arr[0]);
    while(left<=right)
    {
        int mid=(left+right)/2;
        if(arr[mid]>k)
        {
            right=mid-1;                    
        }
        else if(arr[mid]>k)
        {
            left=mid+1;        
        }  
        else
        {
            printf("找到了,下标是%d\n:",mid);
            break;        
        }  
        if(left>right)
         {
            printf("找不到\n");                    
        }
    }
    return 0;
    }
    编写代码，演示多个字符从两端向中间汇聚
    #include <stdio.h>
#include <string.h>
#include <windows.h>
#include <stdlib.h>
int main()
{
    char arr1[]="welcome to bit!!!!!";
    char arr2[]="###################";
    int left=0;
    int right=strlen(arr1)-1;
    while(left<=right)
    {
        arr2[left]=arr1[left];
        arr2[right]=arr1[right];
        printf("%S\n",arr2);
        Sleep(1000);
        sustem("cls");
        left++;
        right--;                    
    }
    printf("%s\n",arr[2]);
    return 0;
}
编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则提示登陆成功，如果三次均输入错误，则退出程序。
#include<stdio.h>
#include <string.h>
int main()
{
    int i=0;
    char password[20]={0};
    for(i=0;i<3;i++)
    {
        printf("请输入密码：>");
        scanf("%d",password);
        if(strcmp(password,"12345")==0)
        {
            printf("登录成功\n");
            break;        
        }
        else
        {
            printf("输入错误\n");        
        }            
    }
    if(i==3)
    printf("三次密码均错误，退出程序\n");
    return 0;
}
